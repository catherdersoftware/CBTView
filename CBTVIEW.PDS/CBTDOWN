  /* --------------------  rexx procedure  -------------------- *
  | Name:      CBTDown                                         |
  |                                                            |
  | Function:  Download ALL of the CBTTape.org files, unzip,   |
  |            copy to z/OS, and RECEIVE them.                 |
  |                                                            |
  | Syntax:    %cbtdown hlq                                    |
  |                                                            |
  |            hlq - the HLQ where the files will be placed    |
  |                  in z/OS (e.g. hlq.FILEnnn.PDS)            |
  |                                                            |
  | Usage Notes:  Requires the ability to use FTP to access    |
  |               www.cbttape.org and space in the /tmp        |
  |               filesystem for one file at a time.           |
  |                                                            |
  |               Must be executed from hlq.FILEIDX.PDS        |
  |                                                            |
  |               hlq.FILEIDX.PDS(CBTINDEX) must exist as      |
  |               it is used for the file access               |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            2021/04/11 LBD - Add check for HLQ              |
  |            2021/04/10 LBD - Creation                       |
  |                                                            |
  * ---------------------------------------------------------- */
  arg hlq

  if hlq = '' then do
  say ' '
  say 'Error.......'
  say ' '
  say 'the correct syntax is %CBTDOWN hlq'
  say 'and for some reason the hlq is missing.'
  say ' '
  say 'exiting'
  exit 16
  end

  /* --------------- *
  | Define defaults |
  * --------------- */
  parse value '' with null
  cbtdd = 'CBT'time('s')
  sysout = 'Z'

  call check_overrides

  x = listdsi("'"hlq".FILEIDX.PDS'")
  if x > 0 then do
    say 'Error.....'
    say ' '
    say "'"hlq".FILEIDX.PDS'" is sysdsn("'"hlq".FILEIDX.PDS'")
    exit 16
  end

  /* ------------------------------------------ *
  | Place the unzip tool into /tmp for our use |
  | - if it isn't already there                |
  * ------------------------------------------ */
  unzip_dsn = "//'"hlq".FILEIDX.PDS(UNZIP)'"

  cmd_file ='/tmp/'sysvar('sysuid')'.ftp'
  cmd = 'cd /tmp && ls -la unzip'
  x = do_command(cmd)
  if pos('not found',e.1) > 0 then do
    drop g. e.
    cmd = 'cd /tmp ; cp -B "'unzip_dsn'" unzip.pax; pax -rvf unzip.pax' ,
      '&& chmod +x unzip ; rm unzip.pax ; ls -laT /tmp/'
    x = do_command(cmd)
  end

  /* ------------------------------------------- *
  | Read the CBTINDEX for the files to download |
  * ------------------------------------------- */
  "Alloc f("cbtdd") shr reuse ds('"hlq".fileidx.pds(cbtindex)')"
  'Execio * diskr' cbtdd '(finis stem index.'
  'Free  f('cbtdd')'

  do cbti = 1 to index.0
    file = word(index.cbti,1)
    if file = '001' then iterate
    call get_files
  end

  Exit 0

Get_Files:
  get_file = 'CBT'file'.zip'
  cmd = 'cd /tmp/  && rm 'get_file
  x = do_command(cmd)

  call Write_Command_File 'FTP'

  cmd = 'cd /tmp/ && ftp www.cbttape.org <' cmd_file ,
    '&& unzip -o' get_file
  drop g. e.
  x = do_command(cmd)

  archive = null
  if g.0 > 0 then
  do i = g.0 to 0 by -1
    if word(g.i,1) = 'inflating:' then do
      archive = word(g.i,2)
      leave
    end
    end

    cmd = 'cd /tmp/ && rm' cmd_file '&& rm' get_file
    drop g. e.
    x = do_command(cmd)

    if archive = null then do
      say 'Not Found.'
      say get_file 'was not found at www.cbttape.org.'
      return 0
    end

    cmd = 'cd /tmp/ && ls -la' archive
    drop g. e.
    x = do_command(cmd)
    space = (word(g.1,5)%50000 + 1) * 2
    zos = "'"hlq"."archive"'"

    say  'Copying file /tmp/'archive
    say  'into' zos
    say ' '

    call outtrap 'x.'
    'delete' zos
    call outtrap 'off'

    'alloc ds('zos') new spa('space','space') tr dsorg(ps)' ,
      'recfm(f b) lrecl(80) blksize(32720)'
    'free ds('zos')'
    from_dir = '/tmp/'archive
    'oget' "'"from_dir"'" zos 'Binary'

    parse value archive with zospds'.' .
    if right(archive,4) = '.XMI' then do
      zospds = hlq'.'zospds'.PDS'

      say  'Receiving file' zos
      say  'into' zospds
      say ' '

      x = listdsi("'"zospds"'" "NORECALL")
      if x = 0 then  do
        call outtrap 'x.'
        dt = right(date('s',substr(syscreate,3,2)''right(syscreate,3),'j'),6)
        oldzos = zospds'.D'dt
        'rename' "'"zospds"'" "'"oldzos"'"
        call outtrap 'off'
      end

      'newstack'
      queue "dsn('"zospds"') sysout("sysout")"
      x = PROMPT('ON')
      call outtrap 'x.'
      "Receive inds("zos")"
      rrc = rc
      call outtrap 'off'
      'delstack'
      call outtrap 'x.'
      'delete' zos
      call outtrap 'off'
    end
    else  zospds = hlq'.'zospds'.DATA'
    cmd = 'cd /tmp/ && rm'  archive
    drop g. e.
    x = do_command(cmd)
    dsn = zospds
    return 0

    /* ----------------------------------------- *
    | Write the command file out in OMVS format |
    * ----------------------------------------- */
  Write_Command_File:
    arg wcf_opt
    call syscalls 'ON'
    address syscall
    'open' cmd_file,
      O_rdwr+O_creat+O_trunc,
      660
    if retval=-1 then
    do
      zerrsm = null
      zerrlm = 'file not opened, error codes' errno errnojr
      say zerrlm
      return
    end
    fd=retval
    call write_it 'anonymous'
    call write_it sysvar('sysuid')'@mail.com'
    if wcf_opt = 'FTP' then
    call write_it 'bin'
    /* Comment Start
    call write_it 'locsite fwfriendly'
    Comment End */
    call write_it 'cd pub'
    if wcf_opt = 'FTP'
    then do
      call write_it 'cd cbt'
      call write_it 'get' get_file
    end
    call write_it 'quit'
    if retval=-1 then do
      zerrsm = null
      zerrlm = 'record not written, error codes' errno errnojr
      say zerrlm
    end
    'close' fd
    return

    /* ------------------------------------- *
    | Write out the record to the OMVS file |
    * ------------------------------------- */
  write_it:
    parse arg rec
    rec = rec || esc_n
    'write' fd 'rec' length(rec)
    return
    Exit

    /* ------------------------ *
    | Process the OMVS command |
    * ------------------------ */
  Do_Command:
    parse arg cmd
    if datatype(env.0) /= 'NUM' then call get_env
    drop g. e.
    x = bpxwunix(cmd,,g.,e.,env.)
    return x

  Get_Env:
    x = bpxwunix('pwd',,g.,e.)
    home = strip(g.1)
    x = bpxwunix('env',,env.,e.)
    x = env.0 + 1
    env.x = 'HOME='home
    env.0 = x
    drop e.
    return

  /* ---------------------------------------------- *
   | Process the site customization override member |
   * ---------------------------------------------- */
Check_Overrides:
  "Alloc f("cbtdd") shr reuse ds('"hlq".FILEIDX.PDS(CBTCONFG)')"
  'Execio * diskr' cbtdd '(finis stem ovr.'
  'Free  f('cbtdd')'
  do i = 1 to ovr.0
    if left(ovr.i,1) = '*' then iterate
    Select
      When translate(word(ovr.i,1)) = 'SYSOUT' then
      sysout = word(ovr.i,3)
      Otherwise nop
    End
  end
  return
